rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated and owns the document
    function isAuthenticatedAndOwner(ownerUid) {
      return request.auth != null && request.auth.uid == ownerUid;
    }

    // Helper function to validate common fields for create/update
    function isValidDocument(data) {
      return data.ownerUid is string &&
             data.createdAt is timestamp; // createdAt is set by serverTimestamp
    }

    // --- Budget Settings ---
    match /budgetSettings/{settingId} {
      allow read: if isAuthenticatedAndOwner(resource.data.ownerUid);
      allow create: if request.auth != null &&
                       request.resource.data.ownerUid == request.auth.uid &&
                       request.resource.data.rolloverEnabled is bool &&
                       request.resource.data.previousMonthLeftover is number &&
                       request.resource.data.totalBudgeted is number &&
                       request.resource.data.microInvestingEnabled is bool &&
                       request.resource.data.microInvestingPercentage is number &&
                       request.resource.data.priceAlertThreshold is number &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.createdAt is timestamp;
      allow update: if isAuthenticatedAndOwner(resource.data.ownerUid) &&
                       request.resource.data.ownerUid == resource.data.ownerUid && // ownerUid cannot change
                       request.resource.data.rolloverEnabled is bool &&
                       request.resource.data.previousMonthLeftover is number &&
                       request.resource.data.totalBudgeted is number &&
                       request.resource.data.microInvestingEnabled is bool &&
                       request.resource.data.microInvestingPercentage is number &&
                       request.resource.data.priceAlertThreshold is number &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.updatedAt is timestamp; // updatedAt is set by serverTimestamp
      allow delete: if false; // Budget settings should not be deleted by client
    }

    // --- Transactions ---
    match /transactions/{transactionId} {
      allow read: if isAuthenticatedAndOwner(resource.data.ownerUid);
      allow create: if request.auth != null &&
                       request.resource.data.ownerUid == request.auth.uid &&
                       request.resource.data.date is string &&
                       request.resource.data.merchant is string &&
                       request.resource.data.amount is number &&
                       request.resource.data.categoryId is string &&
                       request.resource.data.status is string &&
                       request.resource.data.isRecurring is bool &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.createdAt is timestamp &&
                       (request.resource.data.isRecurring == false || request.resource.data.recurringTransactionId is string); // recurringTransactionId is optional
      allow update: if isAuthenticatedAndOwner(resource.data.ownerUid) &&
                       request.resource.data.ownerUid == resource.data.ownerUid &&
                       request.resource.data.date is string &&
                       request.resource.data.merchant is string &&
                       request.resource.data.amount is number &&
                       request.resource.data.categoryId is string &&
                       request.resource.data.status is string &&
                       request.resource.data.isRecurring is bool &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.updatedAt is timestamp &&
                       (request.resource.data.isRecurring == false || request.resource.data.recurringTransactionId is string || request.resource.data.recurringTransactionId == null);
      allow delete: if isAuthenticatedAndOwner(resource.data.ownerUid);
    }

    // --- Categories ---
    match /categories/{categoryId} {
      allow read: if isAuthenticatedAndOwner(resource.data.ownerUid);
      allow create: if request.auth != null &&
                       request.resource.data.ownerUid == request.auth.uid &&
                       request.resource.data.name is string &&
                       request.resource.data.budgeted is number &&
                       request.resource.data.color is string &&
                       request.resource.data.emoji is string &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.createdAt is timestamp;
      allow update: if isAuthenticatedAndOwner(resource.data.ownerUid) &&
                       request.resource.data.ownerUid == resource.data.ownerUid &&
                       request.resource.data.name is string &&
                       request.resource.data.budgeted is number &&
                       request.resource.data.color is string &&
                       request.resource.data.emoji is string &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.updatedAt is timestamp;
      allow delete: if isAuthenticatedAndOwner(resource.data.ownerUid);
    }

    // --- Accounts ---
    match /accounts/{accountId} {
      allow read: if isAuthenticatedAndOwner(resource.data.ownerUid);
      allow create: if request.auth != null &&
                       request.resource.data.ownerUid == request.auth.uid &&
                       request.resource.data.name is string &&
                       request.resource.data.balance is number &&
                       request.resource.data.type is string &&
                       request.resource.data.lastUpdated is string &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.createdAt is timestamp;
      allow update: if isAuthenticatedAndOwner(resource.data.ownerUid) &&
                       request.resource.data.ownerUid == resource.data.ownerUid &&
                       request.resource.data.name is string &&
                       request.resource.data.balance is number &&
                       request.resource.data.type is string &&
                       request.resource.data.lastUpdated is string &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.updatedAt is timestamp;
      allow delete: if isAuthenticatedAndOwner(resource.data.ownerUid);
    }

    // --- Goals ---
    match /goals/{goalId} {
      allow read: if isAuthenticatedAndOwner(resource.data.ownerUid);
      allow create: if request.auth != null &&
                       request.resource.data.ownerUid == request.auth.uid &&
                       request.resource.data.name is string &&
                       request.resource.data.target is number &&
                       request.resource.data.current is number &&
                       request.resource.data.color is string &&
                       request.resource.data.targetDate is string &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.createdAt is timestamp;
      allow update: if isAuthenticatedAndOwner(resource.data.ownerUid) &&
                       request.resource.data.ownerUid == resource.data.ownerUid &&
                       request.resource.data.name is string &&
                       request.resource.data.target is number &&
                       request.resource.data.current is number &&
                       request.resource.data.color is string &&
                       request.resource.data.targetDate is string &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.updatedAt is timestamp;
      allow delete: if isAuthenticatedAndOwner(resource.data.ownerUid);
    }

    // --- Recurring Transactions ---
    match /recurringTransactions/{recurringTransactionId} {
      allow read: if isAuthenticatedAndOwner(resource.data.ownerUid);
      allow create: if request.auth != null &&
                       request.resource.data.ownerUid == request.auth.uid &&
                       request.resource.data.name is string &&
                       request.resource.data.amount is number &&
                       request.resource.data.categoryId is string &&
                       request.resource.data.frequency is string &&
                       request.resource.data.nextDate is string &&
                       request.resource.data.emoji is string &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.createdAt is timestamp;
      allow update: if isAuthenticatedAndOwner(resource.data.ownerUid) &&
                       request.resource.data.ownerUid == resource.data.ownerUid &&
                       request.resource.data.name is string &&
                       request.resource.data.amount is number &&
                       request.resource.data.categoryId is string &&
                       request.resource.data.frequency is string &&
                       request.resource.data.nextDate is string &&
                       request.resource.data.emoji is string &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.updatedAt is timestamp;
      allow delete: if isAuthenticatedAndOwner(resource.data.ownerUid);
    }

    // --- Investments ---
    match /investments/{investmentId} {
      allow read: if isAuthenticatedAndOwner(resource.data.ownerUid);
      allow create: if request.auth != null &&
                       request.resource.data.ownerUid == request.auth.uid &&
                       request.resource.data.name is string &&
                       request.resource.data.type is string &&
                       request.resource.data.quantity is number &&
                       request.resource.data.buyPrice is number &&
                       request.resource.data.currentPrice is number &&
                       request.resource.data.datePurchased is string &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.createdAt is timestamp &&
                       (request.resource.data.type == 'Stock' ? request.resource.data.symbol is string : true) &&
                       (request.resource.data.type == 'Crypto' ? request.resource.data.coingeckoId is string : true);
      allow update: if isAuthenticatedAndOwner(resource.data.ownerUid) &&
                       request.resource.data.ownerUid == resource.data.ownerUid &&
                       request.resource.data.name is string &&
                       request.resource.data.type is string &&
                       request.resource.data.quantity is number &&
                       request.resource.data.buyPrice is number &&
                       request.resource.data.currentPrice is number &&
                       request.resource.data.datePurchased is string &&
                       request.resource.data.inputCurrencyCode is string &&
                       request.resource.data.updatedAt is timestamp &&
                       (request.resource.data.type == 'Stock' ? request.resource.data.symbol is string : true) &&
                       (request.resource.data.type == 'Crypto' ? request.resource.data.coingeckoId is string : true);
      allow delete: if isAuthenticatedAndOwner(resource.data.ownerUid);
    }

    // --- Portfolio Snapshots ---
    match /portfolioSnapshots/{snapshotId} {
      allow read: if isAuthenticatedAndOwner(resource.data.ownerUid);
      allow create: if request.auth != null &&
                       request.resource.data.ownerUid == request.auth.uid &&
                       request.resource.data.date is string &&
                       request.resource.data.value is number &&
                       request.resource.data.createdAt is timestamp;
      allow update, delete: if false; // Snapshots should not be updated or deleted by client
    }
  }
}